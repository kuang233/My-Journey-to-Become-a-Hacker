提一个小思考题。#每日思考#
很多PHP开发分不太清addslashes和htmlspecialchars两个函数的区别，所以有时候会直接把用户输入
的数据套用上这两个函数。
此时有两种情况，一种是先执行addslashes再执行htmlspecialchars：
htmlspecialchars(addslashes($data), ENT_QUOTES);
另一种是先执行htmlspecialchars再执行addslashes：
addslashes(htmlspecialchars($data, ENT_QUOTES));
不考虑对业务的影响的情况下，请问上述两种情况哪个比较安全，哪个不太安全？不太安全具体体现在
哪些情况下，能否举例说明？
===
答案是，第一种方法更加安全。
相比起来，第一种方案是比较安全的。不考虑\x00时，addslashes是在原有字符（引号、反斜线）的基
础上增加新的字符（反斜线），并没有修改原有字符；先执行addslashes时因为没有修改原有字符，所
以这些原有的字符在htmlspecialchars时仍然进行了转换。这两个函数的目的都达成了，所以比较安
全。
第二种方案有个比较大的问题，就是先执行了htmlspecialchars，而htmlspecialchars是会变换原有字
符的。它将引号、尖括号、and符号变成了另外的一些字符，如果第二步再执行addslashes，这个
addslashes实际上是没有干任何事情的。
所以，第二种方案，在数据中没有反引号和\x00的情况下，实际上等于只执行了htmlspecialchars；在
有反引号和\x00的情况下，也等于只转义了这两个字符。
那么，在实际案例中具体会有什么影响呢？
举一个具体例子：
<?php
$url = addslashes(htmlspecialchars($_GET['id'] ?? '', ENT_QUOTES));
?>
...
<img src="<?=$url?>" onerror="console.log('url <?=$url?> is error.')">
开发者本来的意思是，用户输入url，然后作为图片的地址；在出错的情况下，将错误信息打印在
JavaScript的控制台中。
但这个时候，如果使用方案2进行编码，实际上等于没有转义单引号。
用户输入 url='|alert(1)|' 的时候，url将被编码成 &#039;|alert(1)|&#039; 。但因为输出在HTML
属性中，在HTML解析的时候会先解码成 url='|alert(1)|' ，再执行JavaScript，此时执行的js就是
console.log('url '|alert(1)|' is error.') ，造成了一个反射型XSS漏洞。
可以自己试试，参数url1是用第一种方案，参数url2是用第二种方案：
https://675ba661.n0p.co/2aaf539c-b06a-4f4e-ab45-522dfe075c85.php?url2=%27|alert(1)|%27
转自同学大佬思考，非原创
